entrypoints Statement;
comment "(*" "*)" ;

-- Global statement

BaseBitmask       . Statement     ::= Field ;
ConsBitmask       . Statement     ::= Field ";" Statement ;

-- Statement format

FieldDefault      . Field         ::= Identifier ":" Expression ;
FieldWithOption   . Field         ::= Identifier ":" Expression ":" QualifierList ;

-- Identifier

SkipIdent         . Identifier    ::= "_" ;
NamedIdent        . Identifier    ::= Ident ;
ValueIdent        . Identifier    ::= Value ;
ChoiceIdent       . Identifier    ::= Choice ;
NamedChoiceIdent  . Identifier    ::= NamedChoice ;
ParensIdent       . Identifier    ::= "(" Identifier ")" ;

-- Expression

NumExpr           . Expression4   ::= Number ;
NamedExpr         . Expression4   ::= Ident ;
FnExpr            . Expression3   ::= FnCall              Expression4 ;
MulExpr           . Expression2   ::= Expression2 "*"     Expression3 ;
DivExpr           . Expression2   ::= Expression2 "/"     Expression3 ;
RemExpr           . Expression2   ::= Expression2 "%"     Expression3 ;
ModExpr           . Expression2   ::= Expression2 "mod"   Expression3 ;
AndExpr           . Expression2   ::= Expression2 "land"  Expression3 ;
OrExpr            . Expression2   ::= Expression2 "lor"   Expression3 ;
XorExpr           . Expression2   ::= Expression2 "lxor"  Expression3 ;
AddExpr           . Expression1   ::= Expression  "+"     Expression2 ;
SubExpr           . Expression1   ::= Expression  "-"     Expression2 ;
NegExpr           . Expression    ::=             "-"     Expression1 ;
_                 . Expression    ::= Expression1 ;
_                 . Expression1   ::= Expression2 ;
_                 . Expression2   ::= Expression3 ;
_                 . Expression3   ::= Expression4 ;
_                 . Expression4   ::= "(" Expression ")" ;

-- Qualifiers

BaseQualifiers    . QualifierList ::= Qualifier ;
ConsQualifiers    . QualifierList ::= Qualifier "," QualifierList ;
IntQualifier      . Qualifier     ::= "int" ;
StrQualifier      . Qualifier     ::= "string" ;
BstQualifier      . Qualifier     ::= "bitstring" ;
SintQualifier     . Qualifier     ::= "signed" ;
UintQualifier     . Qualifier     ::= "unsigned" ;
BEQualifier       . Qualifier     ::= "bigendian" ;
LEQualifier       . Qualifier     ::= "littleendian" ;
NEQualifier       . Qualifier     ::= "nativeendian" ;
EndianQualifier   . Qualifier     ::= "endian" "(" Endian ")";
OffsetQualifier   . Qualifier     ::= "offset" "(" Expression ")";

-- Value

NumValue          . Value         ::= Number ;
StrValue          . Value         ::= String ;

-- Number

HexNumber         . Number        ::= HexInteger ;
DecNumber         . Number        ::= Integer ;
OctNumber         . Number        ::= OctInteger ;
BinNumber         . Number        ::= BinInteger ;

-- Choice

BaseNumList       . NumberList    ::= Number ;
ConsNumList       . NumberList    ::= Number "|" NumberList ;

BaseStrList       . StringList    ::= String ;
ConsStrList       . StringList    ::= String "|" StringList ;

NumChoice         . Choice        ::= "(" NumberList ")" ;
StrChoice         . Choice        ::= "(" StringList ")" ;
SkipNamedChoice   . NamedChoice   ::= Choice "as" "_" ;
IdentNamedChoice  . NamedChoice   ::= Choice "as" Ident ;

-- FnCall

BaseFnCall        . FnCall        ::= Ident ;
ConsFnCall        . FnCall        ::= Ident "." FnCall ;

-- Endian

BaseEndian        . Endian        ::= Ident ;
FuncEndian        . Endian        ::= FnCall Ident ;

-- Tokens

token HexInteger {"0x"} ( digit | ["abcdefABCDEF"] )+ ('_' ('l' | 'L'))? ;
token OctInteger {"0o"} ( digit - ["89"] )+ ('_' ('l' | 'L'))? ;
token BinInteger {"0b"} ( '0' | '1' )+ ('_' ('l' | 'L'))? ;
